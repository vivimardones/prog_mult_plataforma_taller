@page "/"
@using BlazorBiblioteca.Shared
@inject HttpClient Http

<PageTitle>Biblioteca</PageTitle>
<style>
    .column {
        width: min(60%, 120rem);
        margin: 0 auto;
    }

    .tabla {
        margin: auto;
    }

    .bg-degrade {
        background: rgb(48, 255, 210);
        background: linear-gradient(0deg, rgba(48, 255, 210, 1) 0%, rgba(220, 255, 250, 0.67) 100%);
    }
</style>


<div class="bg-degrade">
    <h1 class="text-center mb-3">LIBROS EN BIBLIOTECA</h1>

    <div class="mb-3">
        <p>@conexionServidor</p>
        <p>@conexionLibros</p>
    </div>

    <div class="column">
        <h2>FORMULARIO</h2>
        <EditForm Model="@libro" OnValidSubmit="ShowLoadingDataAsync" FormName="createOrUpdate">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label class="col-md-2 col-form-label" for="nombre">Nombre del libro:</label>
                <div class="mb-3">
                    <InputText class="form-control" id="nombre" @bind-Value=libro!.NombreLibro></InputText>
                    <ValidationMessage For="@(() => libro.NombreLibro)" />
                </div>
            </div>
            <div class="mb-3">
                <label class="col-md-2 col-form-label" for="autor">Autor:</label>
                <div class="mb-3">
                    <InputText class="form-control" id="autor" @bind-Value=libro!.Autor></InputText>
                    <ValidationMessage For="@(() => libro.Autor)" />
                </div>
            </div>
            <div class="mb-3">
                <label class="col-md-2 col-form-label" for="paginas">Número de páginas:</label>
                <div class="mb-3">
                    <NumberInput TValue="int" id="paginas" @bind-Value=libro.NumPaginas AllowNegativeNumbers=false>
                    </NumberInput>
                    <ValidationMessage For="@(() => libro.NumPaginas)" />
                </div>
            </div>
            <div class="mb-3">
                <label class="col-md-2 col-form-label" for="fecha">Fecha de publicación:</label>
                <div class="mb-3">
                    <DateInput TValue="DateOnly" id="fecha" @bind-Value=libro!.FechaPublicacion />
                </div>
            </div>

            <Button Color="ButtonColor.Success" Size="ButtonSize.Large" type="ButtonType.Submit">Guardar libro</Button>
            <Preload LoadingText="Cargando..." />
        </EditForm>
        @if (!string.IsNullOrEmpty(message))
        {
            <Alert Color="@alertColor" Dismissable="false">
                <Icon Name="@alertIconName" />
                @message
            </Alert>
        }

        @if (libros.Count == 0)
        {
            <h3>@message</h3>
        }
        else
        {
            <h3>LISTADO DE LIBROS</h3>
            <table class="table table-striped" id="tabla" name="tabla" cellpadding="3" style="font: 10pt">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Nombre</th>
                        <th>Autor</th>
                        <th>Páginas</th>
                        <th>Fecha Publicación</th>
                        <th>Actualizar</th>
                        <th>Eliminar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var libro in libros)
                    {
                        <tr @key="libro.Id">
                            <td>@libro.Id</td>
                            <td>@libro.NombreLibro</td>
                            <td>@libro.Autor</td>
                            <td>@libro.NumPaginas</td>
                            <td>@libro.FechaPublicacion.ToString("dd/MM/yyyy")</td>
                            <td>
                                <Button Color="ButtonColor.Warning" Size="ButtonSize.Medium"
                                    @onclick="() => this.libro = libro">
                                    Actualizar
                                </Button>
                            </td>
                            <td>
                                <Button Color="ButtonColor.Danger" Outline="true" Size="ButtonSize.Medium"
                                    @onclick="() => DeleteLibroConPreload(libro.Id)">
                                    Eliminar
                                </Button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>
|
@code {
    string url = "https://localhost:7150/";
    string conexionServidor = "Conectando..";
    string conexionLibros = "Conectando..";
    string message = string.Empty;

    AlertColor alertColor = AlertColor.Primary;
    IconName alertIconName = IconName.InfoCircleFill;

    List<Libro> libros = new List<Libro>();

    [SupplyParameterFromForm(FormName = "createOrUpdate")]
    Libro libro { get; set; } = new();

    [Inject] protected PreloadService preloadService { get; set; } = default!;
    private async Task ShowLoadingDataAsync()
    {
        preloadService.Show(SpinnerColor.Light, "Cargando...");

        await Task.Delay(3000);
        await CreateOrUpdateLibro();

        preloadService.Hide();
    }

    private async Task DeleteLibroConPreload(int id)
    {
        preloadService.Show(SpinnerColor.Light, "Eliminando libro...");

        await Task.Delay(2000);
        await DeleteLibro(id);

        preloadService.Hide();
    }


    async Task ProbarConexion()
    {
        conexionServidor = await Http.GetStringAsync(url + "api/Libro/ConexionServidor");
        conexionLibros = await Http.GetStringAsync(url + "api/Libro/ConexionLibros");
    }

    protected override async Task OnInitializedAsync()
    {
        await ProbarConexion();
        await GetLibros();
    }

    async Task GetLibros()
    {
        try
        {
            var data = await Http.GetFromJsonAsync<List<Libro>>(url + "api/Libro/LibrosListar");
            libros = data ?? new List<Libro>(); ;
        }
        catch (Exception ex)
        {
            alertColor = AlertColor.Info;
            alertIconName = IconName.InfoCircleFill;
            message = "No existen libros en la biblioteca actualmente";
            libros = new List<Libro>();
        }
    }

    async Task CreateOrUpdateLibro()
    {
        if (libro.Id == 0)
            await CreateLibro();
        else
            await UpdateLibro();

    }

    async Task CreateLibro()
    {
        var res = await Http.PostAsJsonAsync(url + "api/Libro/LibroAgregar", libro);

        if (res.IsSuccessStatusCode)
        {
            alertColor = AlertColor.Success;
            alertIconName = IconName.CheckCircleFill;
            message = "Se ha ingresado un nuevo libro en la Biblioteca";
            libro = new();
        }
        else
        {
            alertColor = AlertColor.Info;
            alertIconName = IconName.InfoCircleFill;
            message = "Error al ingresar nuevo Libro";
        }

        await GetLibros();
    }

    async Task UpdateLibro()
    {
        var res = await Http.PutAsJsonAsync(url + "api/Libro/libro/" + libro.Id, libro);

        if (res.IsSuccessStatusCode)
        {

            alertColor = AlertColor.Warning;
            alertIconName = IconName.ExclamationCircleFill;
            message = $"Se ha actualizado el libro '{libro.NombreLibro}'";
        }
        else
        {

            alertColor = AlertColor.Info;
            alertIconName = IconName.InfoCircleFill;
            message = $"Error al actualizar Libro {libro.NombreLibro}";
        }

        libro = new();
        await GetLibros();
    }

    async Task DeleteLibro(int id)
    {
        var res = await Http.DeleteAsync(url + $"api/Libro/libro/{id}");

        if (res.IsSuccessStatusCode)
        {
            alertColor = AlertColor.Danger;
            alertIconName = IconName.ExclamationCircleFill;
            message = "Libro eliminado correctamente";
            await GetLibros();
        }
        else
        {
            alertColor = AlertColor.Info;
            alertIconName = IconName.InfoCircleFill;
            message = "Error al eliminar libro";
        }
    }

}